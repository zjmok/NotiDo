plugins {
    id 'com.android.application'
}

// 兼容本地开发和 workflow 脚本
def getEnvOrLocal(String key) {
    def value = System.getenv(key) // github secrets >  CI > gradle
    if (value == null || value.isEmpty()) {
        // 尝试从 local.properties 中获取
        def localProperties = new Properties()
        def localPropertiesFile = file("../local.properties")
        if (localPropertiesFile.exists()) {
            localPropertiesFile.withInputStream { stream ->
                localProperties.load(stream)
            }
        } else {
            throw new FileNotFoundException("local.properties 文件不存在，请求队友助攻")
        }
        // 获取 key 的 value
        value = localProperties.getProperty(key)
    }
    if (value == null || value.isEmpty()) {
        throw new IllegalArgumentException("环境变量 或 local.properties 中缺少 ${key} 的值，请求队友助攻")
    }
    return value
}

android {
    namespace 'com.example.notido'
    compileSdk 35

    defaultConfig {
        applicationId "com.example.notido"
        minSdk 21
        targetSdk 35
        versionCode 1
        versionName "1.0.1"
    }

    signingConfigs {
        release {
            storeFile file("../zjmok.jks") // 密钥库文件路径，本地开发直接放到此路径，CI 环境脚本解密输出到此路径
            storePassword getEnvOrLocal("KEYSTORE_PASSWORD")
            keyAlias getEnvOrLocal("KEY_ALIAS")
            keyPassword getEnvOrLocal("KEY_PASSWORD")
        }
        // Android 自动生成的 debug.keystore 签名
        debugAsRelease {
            storeFile file("${System.getenv('ANDROID_SDK_HOME') ?: System.getProperty('user.home')}/.android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.debugAsRelease
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

}